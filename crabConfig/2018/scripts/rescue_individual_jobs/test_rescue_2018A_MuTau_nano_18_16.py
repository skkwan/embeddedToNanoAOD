# Auto generated configuration file
# modified with instructions from https://twiki.cern.ch/twiki/bin/viewauth/CMS/TauEmbeddingSamplesUL#NanoAOD_Conversion
# using: 
# Revision: 1.19 
# Source: /local/reps/CMSSW/CMSSW/Configuration/Applications/python/ConfigBuilder.py,v 
# with command line options: -s NANO --data --eventcontent NANOAOD --datatier NANOAOD --no_exec --conditions 106X_dataRun2_v37 --era Run2_2018 --filein file:test_18.root --fileout file:test_nano_18.root --python_filename=embedding_nanoAOD_18.py
import FWCore.ParameterSet.Config as cms

from Configuration.Eras.Era_Run2_2018_cff import Run2_2018

process = cms.Process('NANO',Run2_2018)

# import of standard configurations
process.load('Configuration.StandardSequences.Services_cff')
process.load('SimGeneral.HepPDTESSource.pythiapdt_cfi')
process.load('FWCore.MessageService.MessageLogger_cfi')
process.load('Configuration.EventContent.EventContent_cff')
process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
process.load('Configuration.StandardSequences.MagneticField_AutoFromDBCurrent_cff')
process.load('PhysicsTools.NanoAOD.nano_cff')
process.load('Configuration.StandardSequences.EndOfProcess_cff')
process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(-1)
)

# Input source
process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring(

    #'/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/d104cace-a42d-4631-81a1-d33035a1d513.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/4af8e97a-20bf-4949-972f-6a150af22ca3.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/1e0de065-eda4-4263-80af-3ca269401157.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/4ab49dd3-aba3-4dd0-8934-8e235d32c5ce.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/d8729e66-a932-46e5-9462-a05770c4119a.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/1de609b3-b761-472d-9b53-e74e3be4db83.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/4ab49dd3-aba3-4dd0-8934-8e235d32c5ce.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/1bd28be1-4006-4642-9763-b56632f5cad5.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/206aff9a-d142-408f-9b9a-cded557a947c.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/206aff9a-d142-408f-9b9a-cded557a947c.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/ce4f53ab-00c4-49ff-aeec-645dd74c88ec.root', 
    '/store/group/rucio/pog_tau_group/ul_embedding/large_miniAOD_v2/MuTauFinalState/EmbeddingRun2018A/MINIAOD/inputDoubleMu_106X_ULegacy_miniAOD-v1/0000/def92537-d39c-4fc0-8135-cee604fb690a.root'
),
    secondaryFileNames = cms.untracked.vstring()
)

process.options = cms.untracked.PSet(

)

process.source.lumisToProcess = cms.untracked.VLuminosityBlockRange( (
"315785:31-315785:31", "315785:33-315785:33", "315785:39-315785:39", "315785:41-315785:42", "315785:72-315785:72", 
    "315785:10-315785:10", "315785:32-315785:32", "315785:64-315785:64", "315785:5-315785:5", "315785:7-315785:7", 
    "315785:26-315785:26", "315785:44-315785:44", "315785:89-315785:89", "315785:17-315785:17", "315785:22-315785:22", 
    "315785:40-315785:40", "315785:67-315785:67", "315785:74-315785:74", "315785:6-315785:6", "315785:12-315785:13", 
    "315785:16-315785:16", "315785:21-315785:21", "315785:24-315785:24", "315785:29-315785:29", "315785:37-315785:37", 
    "315785:90-315785:90", "315785:11-315785:11", "315785:51-315785:51", "315785:63-315785:63", "315785:75-315785:75", 
    "315785:95-315785:95", "315785:119-315785:119", "315785:124-315785:124", "315785:136-315785:136", "315785:244-315785:244", 
    "315785:92-315785:92", "315785:145-315785:145", "315785:147-315785:147", "315785:245-315785:245", "315785:96-315785:96", 
    "315785:116-315785:116", "315785:122-315785:122", "315785:180-315785:180", "315785:221-315785:221", "315785:120-315785:120", 
    "315785:182-315785:182", "315785:222-315785:222", "315785:91-315785:91", "315785:99-315785:99", "315785:101-315785:101", 
    "315785:135-315785:135", "315785:138-315785:138", "315785:123-315785:123", "315785:137-315785:137", "315785:196-315785:196", 
    "315785:100-315785:100", "315785:102-315785:102", "315785:109-315785:109", "315785:121-315785:121", "315785:110-315785:110", 
    "315785:115-315785:115", "315785:146-315785:146", "315785:148-315785:148", "315785:181-315785:181", "315785:183-315785:183", 
    "315785:197-315785:197", "315785:106-315785:106", "315785:126-315785:126", "315785:139-315785:139", "315785:156-315785:156", 
    "315785:170-315785:170", "315785:208-315785:208", "315785:240-315785:240", "315785:252-315785:253", "315785:267-315785:267", 
    "315785:269-315785:269", "315785:285-315785:285", "315785:105-315785:105", "315785:125-315785:125", "315785:153-315785:154", 
    "315785:175-315785:175", "315785:204-315785:204", "315785:207-315785:207", "315785:212-315785:212", "315785:238-315785:238", 
    "315785:251-315785:251", "315785:268-315785:268", "315785:270-315785:270", "315785:274-315785:274", "315785:277-315785:278", 
    "315785:284-315785:284", "315785:300-315785:300", "315785:111-315785:111", "315785:140-315785:140", "315785:162-315785:162", 
    "315785:174-315785:174", "315785:178-315785:178", "315785:209-315785:209", "315785:237-315785:237", "315785:243-315785:243", 
    "315785:248-315785:249", "315785:271-315785:271", "315785:273-315785:273", "315785:283-315785:283", "315785:133-315785:133", 
    "315785:157-315785:157", "315785:161-315785:161", "315785:168-315785:168", "315785:172-315785:172", "315785:184-315785:184", 
    "315785:187-315785:187", "315785:286-315785:286", "315785:293-315785:293", "315785:303-315785:303", "315785:163-315785:163", 
    "315785:203-315785:203", "315785:254-315785:254", "315785:272-315785:272", "315785:290-315785:290", "315785:301-315785:301", 
    "315785:305-315785:305", "315785:134-315785:134", "315785:164-315785:164", "315785:169-315785:169", "315785:179-315785:179", 
    "315785:210-315785:211", "315785:227-315785:227", "315785:241-315785:241", "315785:262-315785:263", "315785:289-315785:289", 
    "315785:291-315785:291", "315785:112-315785:112", "315785:131-315785:132", "315785:155-315785:155", "315785:158-315785:158", 
    "315785:173-315785:173", "315785:185-315785:185", "315785:239-315785:239", "315785:250-315785:250", "315785:275-315785:276", 
    "315785:287-315785:287", "315785:302-315785:302", "315785:171-315785:171", "315785:186-315785:186", "315785:228-315785:228", 
    "315785:233-315785:234", "315785:242-315785:242", "315785:261-315785:261", "315785:282-315785:282", "315785:288-315785:288", 
    "315785:292-315785:292", "315785:304-315785:304", "315785:246-315785:246", "315785:257-315785:257", "315785:260-315785:260", 
    "315785:281-315785:281", "315785:296-315785:296", "315785:103-315785:103", "315785:236-315785:236", "315785:259-315785:259", 
    "315785:298-315785:298", "315785:104-315785:104", "315785:265-315785:265", "315785:247-315785:247", "315785:256-315785:256", 
    "315785:258-315785:258", "315785:279-315785:279", "315785:108-315785:108", "315785:266-315785:266", "315785:297-315785:297", 
    "315785:299-315785:299", "315785:107-315785:107", "315785:264-315785:264", "315785:255-315785:255", "315785:280-315785:280", 
    "315785:294-315785:295", "315786:76-315786:76", "315786:10-315786:10", "315786:8-315786:9", "315764:67-315764:68", 
    "315764:61-315764:61", "315764:92-315764:92", "315764:64-315764:64", "315764:60-315764:60", "315764:63-315764:63", 
    "315764:65-315764:65", "315764:59-315764:59", "315764:66-315764:66", "315764:114-315764:114", "315764:72-315764:72", 
    "315764:70-315764:70", "315764:141-315764:141", "315764:71-315764:71", "315764:133-315764:133", "315787:60-315787:60", 
    "315787:66-315787:66", "315787:72-315787:72", "315787:81-315787:81", "315787:87-315787:88", "315787:92-315787:92", 
    "315787:105-315787:105", "315787:108-315787:108", "315787:114-315787:115", "315787:119-315787:121", "315787:62-315787:63", 
    "315787:69-315787:69", "315787:82-315787:82", "315787:84-315787:84", "315787:91-315787:91", "315787:97-315787:97", 
    "315787:100-315787:100", "315787:103-315787:103", "315787:107-315787:107", "315787:116-315787:116", "315787:58-315787:58", 
    "315787:70-315787:70", "315787:83-315787:83", "315787:94-315787:94", "315787:101-315787:101", "315787:61-315787:61", 
    "315787:65-315787:65", "315787:67-315787:68", "315787:77-315787:78", "315787:85-315787:85", "315787:90-315787:90", 
    "315787:98-315787:98", "315787:102-315787:102", "315787:109-315787:109", "315787:117-315787:117", "315787:76-315787:76", 
    "315787:79-315787:79", "315787:95-315787:95", "315787:99-315787:99", "315787:80-315787:80", "315787:86-315787:86", 
    "315787:106-315787:106", "315787:123-315787:123", "315787:57-315787:57", "315787:71-315787:71", "315787:74-315787:74", 
    "315787:89-315787:89", "315787:93-315787:93", "315787:113-315787:113", "315787:124-315787:124", "315787:59-315787:59", 
    "315787:64-315787:64", "315787:73-315787:73", "315787:75-315787:75", "315787:96-315787:96", "315787:104-315787:104", 
    "315787:110-315787:112", "315787:118-315787:118", "315787:122-315787:122", "315787:245-315787:245", "315787:250-315787:250", 
    "315787:246-315787:246", "315787:253-315787:254", "315787:143-315787:143", "315787:242-315787:242", "315787:244-315787:244", 
    "315787:142-315787:142", "315787:240-315787:240", "315787:247-315787:247", "315787:249-315787:249", "315787:243-315787:243", 
    "315787:248-315787:248", "315787:252-315787:252", "315787:241-315787:241", "315787:251-315787:251", "315790:65-315790:65", 
    "315790:174-315790:174", "315790:176-315790:176", "315790:182-315790:182", "315790:192-315790:192", "315790:212-315790:212", 
    "315790:223-315790:223", "315790:229-315790:229", "315790:262-315790:262", "315790:275-315790:275", "315790:289-315790:289", 
    "315790:291-315790:292", "315790:294-315790:294", "315790:67-315790:67", "315790:148-315790:148", "315790:162-315790:163", 
    "315790:165-315790:165", "315790:183-315790:183", "315790:191-315790:191", "315790:195-315790:195", "315790:200-315790:200", 
    "315790:206-315790:206", "315790:221-315790:221", "315790:224-315790:224", "315790:228-315790:228", "315790:236-315790:236", 
    "315790:254-315790:255", "315790:257-315790:257", "315790:260-315790:260", "315790:263-315790:263", "315790:311-315790:311", 
    "315790:320-315790:320", "315790:326-315790:326", "315790:193-315790:193", "315790:196-315790:198", "315790:205-315790:205", 
    "315790:208-315790:209", "315790:245-315790:245", "315790:249-315790:249", "315790:261-315790:261", "315790:265-315790:265", 
    "315790:270-315790:270", "315790:277-315790:277", "315790:310-315790:310", "315790:331-315790:331", "315790:64-315790:64", 
    "315790:166-315790:166", "315790:175-315790:175", "315790:177-315790:177", "315790:188-315790:188", "315790:199-315790:199", 
    "315790:203-315790:203", "315790:213-315790:213", "315790:226-315790:226", "315790:230-315790:230", "315790:233-315790:233", 
    "315790:235-315790:235", "315790:237-315790:237", "315790:242-315790:244", "315790:252-315790:252", "315790:259-315790:259", 
    "315790:267-315790:269", "315790:273-315790:274", "315790:286-315790:286", "315790:130-315790:133", "315790:161-315790:161", 
    "315790:179-315790:179", "315790:185-315790:185", "315790:227-315790:227", "315790:232-315790:232", "315790:239-315790:239", 
    "315790:253-315790:253", "315790:271-315790:271", "315790:287-315790:288", "315790:312-315790:312", "315790:321-315790:321", 
    "315790:328-315790:328", "315790:68-315790:68", "315790:129-315790:129", "315790:173-315790:173", "315790:184-315790:184", 
    "315790:190-315790:190", "315790:194-315790:194", "315790:201-315790:202", "315790:204-315790:204", "315790:211-315790:211", 
    "315790:222-315790:222", "315790:234-315790:234", "315790:240-315790:241", "315790:246-315790:246", "315790:250-315790:251", 
    "315790:264-315790:264", "315790:293-315790:293", "315790:327-315790:327", "315790:178-315790:178", "315790:180-315790:180", 
    "315790:189-315790:189", "315790:207-315790:207", "315790:220-315790:220", "315790:225-315790:225", "315790:231-315790:231", 
    "315790:238-315790:238", "315790:248-315790:248", "315790:266-315790:266", "315790:272-315790:272", "315790:276-315790:276", 
    "315790:285-315790:285", "315790:309-315790:309", "315790:313-315790:313", "315790:66-315790:66", "315790:164-315790:164", 
    "315790:181-315790:181", "315790:186-315790:187", "315790:210-315790:210", "315790:247-315790:247", "315790:256-315790:256", 
    "315790:258-315790:258", "315790:284-315790:284", "315790:290-315790:290", "315790:295-315790:295", "315790:308-315790:308", 
    "315790:329-315790:330", "315790:317-315790:317", "315790:376-315790:377", "315790:626-315790:626", "315790:628-315790:628", 
    "315790:697-315790:697", "315790:713-315790:713", "315790:725-315790:725", "315790:774-315790:774", "315790:776-315790:777", 
    "315790:842-315790:842", "315790:892-315790:892", "315790:894-315790:894", "315790:898-315790:898", "315790:900-315790:900", 
    "315790:912-315790:912", "315790:918-315790:918", "315790:318-315790:318", "315790:345-315790:345", "315790:611-315790:611", 
    "315790:614-315790:614", "315790:625-315790:625", "315790:630-315790:630", "315790:693-315790:693", "315790:695-315790:695", 
    "315790:706-315790:707", "315790:723-315790:723", "315790:728-315790:728", "315790:790-315790:790", "315790:792-315790:793", 
    "315790:812-315790:813", "315790:816-315790:816", "315790:839-315790:839", "315790:915-315790:915", "315790:314-315790:315", 
    "315790:349-315790:349", "315790:375-315790:375", "315790:533-315790:533", "315790:623-315790:623", "315790:629-315790:629", 
    "315790:691-315790:691", "315790:724-315790:724", "315790:772-315790:772", "315790:787-315790:787", "315790:837-315790:837", 
    "315790:895-315790:897", "315790:899-315790:899", "315790:344-315790:344", "315790:346-315790:347", "315790:532-315790:532", 
    "315790:534-315790:534", "315790:612-315790:612", "315790:710-315790:710", "315790:712-315790:712", "315790:722-315790:722", 
    "315790:786-315790:786", "315790:810-315790:810", "315790:817-315790:817", "315790:835-315790:835", "315790:840-315790:841", 
    "315790:901-315790:901", "315790:316-315790:316", "315790:527-315790:527", "315790:531-315790:531", "315790:607-315790:608", 
    "315790:613-315790:613", "315790:690-315790:690", "315790:692-315790:692", "315790:711-315790:711", "315790:727-315790:727", 
    "315790:775-315790:775", "315790:789-315790:789", "315790:791-315790:791", "315790:818-315790:818", "315790:838-315790:838", 
    "315790:911-315790:911", "315790:913-315790:914", "315790:917-315790:917", "315790:374-315790:374", "315790:530-315790:530", 
    "315790:610-315790:610", "315790:618-315790:618", "315790:627-315790:627", "315790:708-315790:708", "315790:811-315790:811", 
    "315790:815-315790:815", "315790:916-315790:916", "315790:319-315790:319", "315790:609-315790:609", "315790:617-315790:617", 
    "315790:621-315790:621", "315790:624-315790:624", "315790:694-315790:694", "315790:729-315790:729", "315790:770-315790:770", 
    "315790:773-315790:773", "315790:788-315790:788", "315790:348-315790:348", "315790:378-315790:379", "315790:528-315790:529", 
    "315790:615-315790:616", "315790:619-315790:620", "315790:622-315790:622", "315790:696-315790:696", "315790:709-315790:709", 
    "315790:726-315790:726", "315790:771-315790:771", "315790:814-315790:814", "315790:836-315790:836", "315790:893-315790:893", 
    "315790:359-315790:359", "315790:443-315790:443", "315790:485-315790:485", "315790:495-315790:495", "315790:499-315790:499", 
    "315790:509-315790:509", "315790:520-315790:522", "315790:564-315790:564", "315790:572-315790:572", "315790:592-315790:592", 
    "315790:637-315790:638", "315790:661-315790:661", "315790:663-315790:663", "315790:732-315790:732", "315790:739-315790:739", 
    "315790:751-315790:751", "315790:757-315790:757", "315790:795-315790:796", "315790:808-315790:808", "315790:822-315790:822", 
    "315790:854-315790:854", "315790:856-315790:856", "315790:902-315790:903", "315790:907-315790:907", "315790:909-315790:909", 
    "315790:920-315790:920", "315790:925-315790:925", "315790:927-315790:927", "315790:931-315790:931", "315790:401-315790:402", 
    "315790:405-315790:405", "315790:426-315790:426", "315790:428-315790:429", "315790:483-315790:483", "315790:496-315790:496", 
    "315790:565-315790:565", "315790:573-315790:573", "315790:585-315790:585", "315790:593-315790:593", "315790:631-315790:631", 
    "315790:633-315790:633", "315790:635-315790:635", "315790:643-315790:643", "315790:645-315790:645", "315790:681-315790:682", 
    "315790:687-315790:687", "315790:737-315790:737", "315790:744-315790:744", "315790:794-315790:794", "315790:806-315790:806", 
    "315790:809-315790:809", "315790:826-315790:826", "315790:861-315790:861", "315790:864-315790:864", "315790:868-315790:868", 
    "315790:871-315790:873", "315790:881-315790:881", "315790:904-315790:904", "315790:929-315790:929", "315790:399-315790:399", 
    "315790:409-315790:409", "315790:440-315790:440", "315790:446-315790:446", "315790:479-315790:479", "315790:484-315790:484", 
    "315790:508-315790:508", "315790:519-315790:519", "315790:526-315790:526", "315790:544-315790:544", "315790:560-315790:563", 
    "315790:567-315790:567", "315790:569-315790:570", "315790:639-315790:640", "315790:656-315790:656", "315790:665-315790:665", 
    "315790:668-315790:669", "315790:684-315790:684", "315790:734-315790:734", "315790:740-315790:740", "315790:750-315790:750", 
    "315790:758-315790:758", "315790:763-315790:764", "315790:768-315790:768", "315790:780-315790:783", "315790:798-315790:799", 
    "315790:804-315790:804", "315790:807-315790:807", "315790:821-315790:821", "315790:823-315790:824", "315790:832-315790:832", 
    "315790:834-315790:834", "315790:844-315790:844", "315790:853-315790:853", "315790:857-315790:857", "315790:867-315790:867", 
    "315790:886-315790:886", "315790:890-315790:890", "315790:361-315790:361", "315790:444-315790:444", "315790:500-315790:500", 
    "315790:505-315790:505", "315790:510-315790:510", "315790:523-315790:524", "315790:543-315790:543", "315790:566-315790:566", 
    "315790:568-315790:568", "315790:594-315790:594", "315790:596-315790:596", "315790:634-315790:634", "315790:641-315790:641", 
    "315790:657-315790:658", "315790:662-315790:662", "315790:666-315790:666", "315790:683-315790:683", "315790:685-315790:685", 
    "315790:742-315790:742", "315790:754-315790:754", "315790:766-315790:766", "315790:779-315790:779", "315790:803-315790:803", 
    "315790:825-315790:825", "315790:828-315790:829", "315790:843-315790:843", "315790:848-315790:849", "315790:862-315790:862", 
    "315790:869-315790:869", "315790:883-315790:883", "315790:885-315790:885", "315790:891-315790:891", "315790:923-315790:923", 
    "315790:406-315790:407", "315790:410-315790:410", "315790:445-315790:445", "315790:481-315790:481", "315790:486-315790:486", 
    "315790:498-315790:498", "315790:506-315790:507", "315790:548-315790:548", "315790:589-315790:589", "315790:642-315790:642", 
    "315790:655-315790:655", "315790:659-315790:659", "315790:686-315790:686", "315790:689-315790:689", "315790:733-315790:733", 
    "315790:735-315790:735", "315790:738-315790:738", "315790:752-315790:753", "315790:756-315790:756", "315790:759-315790:760", 
    "315790:767-315790:767", "315790:797-315790:797", "315790:801-315790:801", "315790:819-315790:819", "315790:827-315790:827", 
    "315790:830-315790:830", "315790:845-315790:846", "315790:855-315790:855", "315790:858-315790:859", "315790:865-315790:865", 
    "315790:874-315790:875", "315790:877-315790:877", "315790:926-315790:926", "315790:356-315790:356", "315790:358-315790:358", 
    "315790:398-315790:398", "315790:425-315790:425", "315790:427-315790:427", "315790:439-315790:439", "315790:497-315790:497", 
    "315790:504-315790:504", "315790:525-315790:525", "315790:547-315790:547", "315790:559-315790:559", "315790:584-315790:584", 
    "315790:591-315790:591", "315790:644-315790:644", "315790:667-315790:667", "315790:670-315790:670", "315790:688-315790:688", 
    "315790:731-315790:731", "315790:743-315790:743", "315790:747-315790:749", "315790:761-315790:762", "315790:785-315790:785", 
    "315790:800-315790:800", "315790:820-315790:820", "315790:831-315790:831", "315790:847-315790:847", "315790:851-315790:851", 
    "315790:863-315790:863", "315790:870-315790:870", "315790:876-315790:876", "315790:878-315790:879", "315790:884-315790:884", 
    "315790:887-315790:889", "315790:905-315790:905", "315790:928-315790:928", "315790:930-315790:930", "315790:360-315790:360", 
    "315790:403-315790:404", "315790:408-315790:408", "315790:423-315790:424", "315790:430-315790:430", "315790:442-315790:442", 
    "315790:480-315790:480", "315790:501-315790:501", "315790:503-315790:503", "315790:545-315790:545", "315790:574-315790:574", 
    "315790:583-315790:583", "315790:586-315790:586", "315790:590-315790:590", "315790:595-315790:595", "315790:598-315790:598", 
    "315790:636-315790:636", "315790:646-315790:646", "315790:736-315790:736", "315790:745-315790:745", "315790:765-315790:765", 
    "315790:769-315790:769", "315790:778-315790:778", "315790:784-315790:784", "315790:802-315790:802", "315790:852-315790:852", 
    "315790:860-315790:860", "315790:880-315790:880", "315790:882-315790:882", "315790:906-315790:906", "315790:908-315790:908", 
    "315790:919-315790:919", "315790:921-315790:922", "315790:357-315790:357", "315790:400-315790:400", "315790:441-315790:441", 
    "315790:482-315790:482", "315790:502-315790:502", "315790:546-315790:546", "315790:549-315790:550", "315790:571-315790:571", 
    "315790:587-315790:588", "315790:597-315790:597", "315790:632-315790:632", "315790:660-315790:660", "315790:664-315790:664", 
    "315790:730-315790:730", "315790:741-315790:741", "315790:746-315790:746", "315790:755-315790:755", "315790:805-315790:805", 
    "315790:833-315790:833", "315790:850-315790:850", "315790:866-315790:866", "315790:910-315790:910", "315790:924-315790:924", 
    "315770:154-315770:154", "315770:99-315770:99", "315770:145-315770:145", "315770:156-315770:156", "315770:98-315770:98", 
    "315800:126-315800:126", "315800:139-315800:139", "315800:171-315800:171", "315800:193-315800:193", "315800:236-315800:236", 
    "315800:303-315800:303", "315800:358-315800:358", "315800:401-315800:401", "315800:440-315800:440", "315800:460-315800:460", 
    "315800:462-315800:462", "315800:473-315800:473", "315800:489-315800:489", "315800:512-315800:512", "315800:535-315800:535", 
    "315800:538-315800:538", "315800:156-315800:156", "315800:194-315800:194", "315800:201-315800:201", "315800:229-315800:229", 
    "315800:272-315800:272", "315800:277-315800:277", "315800:282-315800:282", "315800:328-315800:328", "315800:357-315800:357", 
    "315800:361-315800:361", "315800:402-315800:402", "315800:513-315800:513", "315800:141-315800:141", "315800:152-315800:152", 
    "315800:159-315800:159", "315800:205-315800:205", "315800:227-315800:227", "315800:231-315800:231", "315800:269-315800:269", 
    "315800:332-315800:334", "315800:336-315800:336", "315800:351-315800:352", "315800:354-315800:354", "315800:441-315800:441", 
    "315800:445-315800:445", "315800:457-315800:457", "315800:542-315800:542", "315800:128-315800:128", "315800:142-315800:142", 
    "315800:151-315800:151", "315800:196-315800:196", "315800:211-315800:212", "315800:230-315800:230", "315800:244-315800:244", 
    "315800:281-315800:281", "315800:299-315800:299", "315800:306-315800:306", "315800:327-315800:327", "315800:339-315800:339", 
    "315800:362-315800:362", "315800:367-315800:367", "315800:455-315800:455", "315800:505-315800:505", "315800:524-315800:524", 
    "315800:536-315800:536", "315800:548-315800:548", "315800:550-315800:550", "315800:127-315800:127", "315800:195-315800:195", 
    "315800:259-315800:259", "315800:278-315800:278", "315800:290-315800:290", "315800:304-315800:304", "315800:310-315800:310", 
    "315800:343-315800:343", "315800:504-315800:504", "315800:517-315800:517", "315800:539-315800:539", "315800:547-315800:547", 
    "315800:568-315800:568", "315800:574-315800:574", "315800:125-315800:125", "315800:137-315800:138", "315800:140-315800:140", 
    "315800:155-315800:155", "315800:228-315800:228", "315800:243-315800:243", "315800:270-315800:270", "315800:300-315800:300", 
    "315800:385-315800:386", "315800:439-315800:439", "315800:442-315800:442", "315800:461-315800:461", "315800:463-315800:463", 
    "315800:472-315800:472", "315800:474-315800:475", "315800:511-315800:511", "315800:537-315800:537", "315800:576-315800:576", 
    "315800:123-315800:124", "315800:131-315800:132", "315800:150-315800:150", "315800:160-315800:160", "315800:167-315800:168", 
    "315800:202-315800:202", "315800:206-315800:206", "315800:232-315800:232", "315800:261-315800:261", "315800:271-315800:271", 
    "315800:289-315800:289", "315800:305-315800:305", "315800:309-315800:309", "315800:454-315800:454", "315800:488-315800:488", 
    "315800:516-315800:516", "315800:540-315800:540", "315800:570-315800:570", "315800:575-315800:575", "315800:149-315800:149", 
    "315800:157-315800:158", "315800:161-315800:162", "315800:172-315800:172", "315800:235-315800:235", "315800:260-315800:260", 
    "315800:262-315800:262", "315800:331-315800:331", "315800:335-315800:335", "315800:340-315800:340", "315800:344-315800:344", 
    "315800:353-315800:353", "315800:368-315800:368", "315800:446-315800:446", "315800:456-315800:456", "315800:525-315800:526", 
    "315800:541-315800:541", "315800:543-315800:543", "315800:549-315800:549", "315800:551-315800:552", "315800:569-315800:569", 
    "315784:39-315784:39", "315784:35-315784:36", "315784:40-315784:40", "315784:90-315784:90", "315784:116-315784:116", 
    "315784:34-315784:34", "315784:38-315784:38", "315784:41-315784:42", "315784:32-315784:32", "315784:88-315784:88", 
    "315784:138-315784:138", "315784:37-315784:37", "315784:139-315784:139", "315801:2-315801:2", "315801:10-315801:10", 
    "315801:36-315801:36", "315801:50-315801:50", "315801:85-315801:85", "315801:16-315801:17", "315801:19-315801:19", 
    "315801:27-315801:27", "315801:74-315801:75", "315801:79-315801:80", "315801:5-315801:6", "315801:11-315801:11", 
    "315801:58-315801:59", "315801:61-315801:61", "315801:78-315801:78", "315801:82-315801:82", "315801:133-315801:133", 
    "315801:3-315801:3", "315801:7-315801:7", "315801:13-315801:13", "315801:22-315801:22", "315801:24-315801:24", 
    "315801:28-315801:28", "315801:35-315801:35", "315801:38-315801:39", "315801:77-315801:77", "315801:90-315801:90", 
    "315801:4-315801:4", "315801:76-315801:76", "315801:91-315801:91", "315801:9-315801:9", "315801:14-315801:14", 
    "315801:18-315801:18", "315801:20-315801:20", "315801:23-315801:23", "315801:26-315801:26", "315801:31-315801:31", 
    "315801:40-315801:40", "315801:45-315801:46", "315801:49-315801:49", "315801:81-315801:81", "315801:84-315801:84", 
    "315801:89-315801:89", "315801:131-315801:131", "315801:1-315801:1", "315801:12-315801:12", "315801:15-315801:15", 
    "315801:29-315801:30", "315801:37-315801:37", "315801:44-315801:44", "315801:47-315801:48", "315801:57-315801:57", 
    "315801:83-315801:83", "315801:8-315801:8", "315801:21-315801:21", "315801:25-315801:25", "315801:51-315801:52", 
    "315801:56-315801:56", "315801:60-315801:60", "315801:132-315801:132", "315840:345-315840:345", "315840:498-315840:498", 
    "315840:948-315840:948", "315840:984-315840:984", "315840:1079-315840:1079", "315840:1089-315840:1089", "315840:1138-315840:1138", 
    "315840:228-315840:228", "315840:235-315840:235", "315840:275-315840:275", "315840:369-315840:369", "315840:901-315840:901", 
    "315840:947-315840:947", "315840:1013-315840:1014", "315840:1086-315840:1086", "315840:1140-315840:1140", "315840:646-315840:646", 
    "315840:1088-315840:1088", "315840:1110-315840:1110", "315840:227-315840:227", "315840:902-315840:902", "315840:950-315840:950", 
    "315840:1106-315840:1106", "315840:1108-315840:1109", "315840:276-315840:276", "315840:292-315840:292", "315840:428-315840:429", 
    "315840:499-315840:500", "315840:645-315840:645", "315840:900-315840:900", "315840:949-315840:949", "315840:985-315840:985", 
    "315840:1077-315840:1077", "315840:1087-315840:1087", "315840:1090-315840:1090", "315840:1139-315840:1139", "315840:1150-315840:1150", 
    "315840:236-315840:236", "315840:344-315840:344", "315840:486-315840:486", "315840:644-315840:644", "315840:899-315840:899", 
    "315840:986-315840:986", "315840:1076-315840:1076", "315840:1078-315840:1078", "315840:1142-315840:1142", "315840:1152-315840:1152", 
    "315840:291-315840:291", "315840:368-315840:368", "315840:485-315840:485", "315840:501-315840:501", "315840:987-315840:987", 
    "315840:1141-315840:1141", "315840:647-315840:647", "315840:1012-315840:1012", "315840:1015-315840:1015", "315840:1080-315840:1080", 
    "315840:1107-315840:1107", "315840:1149-315840:1149", "315840:1151-315840:1151", "316058:23-316058:24", "316058:31-316058:31", 
    "316058:59-316058:59", "316058:61-316058:62", "316058:64-316058:64", "316058:78-316058:78", "316058:85-316058:85", 
    "316058:3-316058:3", "316058:10-316058:10", "316058:14-316058:14", "316058:17-316058:17", "316058:21-316058:21", 
    "316058:26-316058:27", "316058:34-316058:34", "316058:46-316058:46", "316058:65-316058:65", "316058:67-316058:67", 
    "316058:73-316058:73", "316058:77-316058:77", "316058:80-316058:80", "316058:83-316058:83", "316058:25-316058:25", 
    "316058:32-316058:32", "316058:41-316058:41", "316058:53-316058:53", "316058:81-316058:82", "316058:89-316058:89", 
    "316058:94-316058:94", "316058:1-316058:1", "316058:13-316058:13", "316058:15-316058:15", "316058:33-316058:33", 
    "316058:70-316058:70", "316058:6-316058:6", "316058:12-316058:12", "316058:18-316058:18", "316058:20-316058:20", 
    "316058:22-316058:22", "316058:30-316058:30", "316058:38-316058:39", "316058:43-316058:43", "316058:63-316058:63", 
    "316058:75-316058:75", "316058:19-316058:19", "316058:29-316058:29", "316058:66-316058:66", "316058:68-316058:68", 
    "316058:96-316058:96", "316058:2-316058:2", "316058:4-316058:5", "316058:7-316058:7", "316058:9-316058:9", 
    "316058:40-316058:40", "316058:57-316058:57", "316058:72-316058:72"
 ) )

# Production Info
process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string('-s nevts:1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

# Output definition

process.NANOAODoutput = cms.OutputModule("NanoAODOutputModule",
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(9),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('NANOAOD'),
        filterName = cms.untracked.string('')
    ),
    fileName = cms.untracked.string('file:test_nano_18_EmbeddingRun2018A_MuTau_16.root'),
    outputCommands = process.NANOAODEventContent.outputCommands
)

# Additional output definition

# Other statements
from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, '106X_dataRun2_v37', '')

# Path and EndPath definitions
process.nanoAOD_step = cms.Path(process.particleLevelSequence + process.genParticleSequence + process.nanoSequenceCommon + process.nanoSequenceOnlyFullSim + process.muonMC + process.electronMC + process.photonMC + process.tauMC + process.globalTablesMC + process.btagWeightTable + process.genWeightsTable + process.genParticleTables)
process.endjob_step = cms.EndPath(process.endOfProcess)
process.NANOAODoutput_step = cms.EndPath(process.NANOAODoutput)

# Schedule definition
process.schedule = cms.Schedule(process.nanoAOD_step,process.endjob_step,process.NANOAODoutput_step)
from PhysicsTools.PatAlgos.tools.helpers import associatePatAlgosToolsTask
associatePatAlgosToolsTask(process)

# customisation of the process.

# Automatic addition of the customisation function from PhysicsTools.NanoAOD.nano_cff
from PhysicsTools.NanoAOD.nano_cff import nanoAOD_customizeData 

#call to customisation function nanoAOD_customizeData imported from PhysicsTools.NanoAOD.nano_cff
process = nanoAOD_customizeData(process)

# End of customisation functions

# Customisation from command line

process.unpackedPatTrigger.triggerResults = cms.InputTag("TriggerResults::SIMembeddingHLT")
process.NANOAODoutput.outputCommands.append("keep edmTriggerResults_*_*_SIMembeddingHLT")
process.NANOAODoutput.outputCommands.append("keep edmTriggerResults_*_*_MERGE")
process.NANOAODoutput.outputCommands.remove("keep edmTriggerResults_*_*_*")
process.genParticles2HepMC.genEventInfo = cms.InputTag("generator", "", "SIMembeddingpreHLT")
process.patJetsReapplyJECPuppi.jetSource = cms.InputTag("slimmedJetsPuppi", "", "MERGE")
process.patJetCorrFactorsReapplyJECPuppi.src = cms.InputTag("slimmedJetsPuppi", "", "MERGE")
process.puppiMetTable.src = cms.InputTag("slimmedMETsPuppi", "", "RERUNPUPPI")
process.rawPuppiMetTable.src = cms.InputTag("slimmedMETsPuppi", "", "RERUNPUPPI")
process.slimmedMETsPuppi.t01Variation = cms.InputTag("slimmedMETsPuppi", "", "RERUNPUPPI")
process.metrawCaloPuppi.metSource = cms.InputTag("slimmedMETsPuppi", "", "RERUNPUPPI")
process.pfMetPuppi.metSource = cms.InputTag("slimmedMETsPuppi", "", "RERUNPUPPI")

# add modifications from https://n2018A_MuTauFinalState&from=1690223938000&to=nowgithub.com/cms-sw/cmssw/pull/38472 to correctly handle trigger flags in NanoAOD
process.triggerObjectTable.selections[0].qualityBits = cms.string(
                            "filter('*CaloIdLTrackIdLIsoVL*TrackIso*Filter') + " \
                            "2*filter('hltEle*WPTight*TrackIsoFilter*') + " \
                            "4*filter('hltEle*WPLoose*TrackIsoFilter') + " \
                            "8*filter('*OverlapFilter*IsoEle*PFTau*') + " \
                            "16*filter('hltEle*Ele*CaloIdLTrackIdLIsoVL*Filter') + " \
                            "32*filter('hltMu*TrkIsoVVL*Ele*CaloIdLTrackIdLIsoVL*Filter*')  + " \
                            "64*filter('hlt*OverlapFilterIsoEle*PFTau*') + " \
                            "128*filter('hltEle*Ele*Ele*CaloIdLTrackIdLDphiLeg*Filter') + " \
                            "256*max(filter('hltL3fL1Mu*DoubleEG*Filtered*'),filter('hltMu*DiEle*CaloIdLTrackIdLElectronleg*Filter')) + " \
                            "512*max(filter('hltL3fL1DoubleMu*EG*Filter*'),filter('hltDiMu*Ele*CaloIdLTrackIdLElectronleg*Filter')) + " \
                            "1024*min(filter('hltEle32L1DoubleEGWPTightGsfTrackIsoFilter'),filter('hltEGL1SingleEGOrFilter')) + " \
                            "2048*filter('hltEle*CaloIdVTGsfTrkIdTGsfDphiFilter') + " \
                            "4096*path('HLT_Ele*PFJet*') + " \
                            "8192*max(filter('hltEG175HEFilter'),filter('hltEG200HEFilter'))")
process.triggerObjectTable.selections[2].qualityBits = cms.string(
                            "filter('*RelTrkIsoVVLFiltered0p4') + " \
                            "2*filter('hltL3crIso*Filtered0p07') + " \
                            "4*filter('*OverlapFilterIsoMu*PFTau*') + " \
                            "8*max(filter('hltL3crIsoL1*SingleMu*Filtered0p07'),filter('hltL3crIsoL1sMu*Filtered0p07')) + " \
                            "16*filter('hltDiMuon*Filtered*') + " \
                            "32*filter('hltMu*TrkIsoVVL*Ele*CaloIdLTrackIdLIsoVL*Filter*') + " \
                            "64*filter('hlt*OverlapFilterIsoMu*PFTau*') + " \
                            "128*filter('hltL3fL1TripleMu*') + " \
                            "256*max(filter('hltL3fL1DoubleMu*EG*Filtered*'),filter('hltDiMu*Ele*CaloIdLTrackIdLElectronleg*Filter')) + " \
                            "512*max(filter('hltL3fL1Mu*DoubleEG*Filtered*'),filter('hltMu*DiEle*CaloIdLTrackIdLElectronleg*Filter')) + " \
                            "1024*max(filter('hltL3fL1sMu*L3Filtered50*'),filter('hltL3fL1sMu*TkFiltered50*')) + " \
                            "2048*max(filter('hltL3fL1sMu*L3Filtered100*'),filter('hltL3fL1sMu*TkFiltered100*'))")
process.triggerObjectTable.selections[3] = cms.PSet(
            name = cms.string("Tau"),
            id = cms.int32(15),
            sel = cms.string("type(84) && pt > 5 && coll('*Tau*') && ( filter('*LooseChargedIso*') || filter('*MediumChargedIso*') || filter('*DeepTau*') || filter('*TightChargedIso*') || filter('*TightOOSCPhotons*') || filter('hltL2TauIsoFilter') || filter('*OverlapFilterIsoMu*') || filter('*OverlapFilterIsoEle*') || filter('*L1HLTMatched*') || filter('*Dz02*') || filter('*DoublePFTau*') || filter('*SinglePFTau*') || filter('hlt*SelectedPFTau') || filter('*DisplPFTau*') || filter('*Tau*') )"), #All trigger objects from a Tau collection + passing at least one filter
            # sel = cms.string("type(84) && pt > 5 && coll('*Tau*') && filter('*Tau*') "), #All trigger objects from a Tau collection + passing at least one filter
            l1seed = cms.string("type(-100)"),
            l1deltaR = cms.double(0.3),
            l2seed = cms.string("type(84) && coll('hltL2TauJetsL1IsoTauSeeded')"),
            l2deltaR = cms.double(0.3),
            skipObjectsNotPassingQualityBits = cms.bool(True),
            qualityBits = cms.string(
                            "filter('*LooseChargedIso*') + " \
                            "2*filter('*MediumChargedIso*') + " \
                            "4*filter('*TightChargedIso*') + " \
                            "8*filter('*DeepTau*') + " \
                            "16*filter('*TightOOSCPhotons*') + " \
                            "32*filter('*Hps*') + " \
                            "64*filter('hlt*DoublePFTau*TrackPt1*ChargedIsolation*Dz02*') + " \
                            "128*filter('hlt*DoublePFTau*DeepTau*L1HLTMatched') + " \
                            "256*filter('hlt*OverlapFilterIsoEle*WPTightGsf*PFTau') + " \
                            "512*filter('hlt*OverlapFilterIsoMu*PFTau*') + " \
                            "1024*filter('hlt*SelectedPFTau*L1HLTMatched') + " \
                            "2048*filter('hlt*DoublePFTau*TrackPt1*ChargedIso*') + " \
                            "4096*filter('hlt*DoublePFTau*Track*ChargedIso*AgainstMuon') + " \
                            "8192*filter('hltHpsSinglePFTau*HLTMatched') + " \
                            "16384*filter('hltHpsOverlapFilterDeepTauDoublePFTau*PFJet*') + " \
                            "32768*filter('hlt*Double*ChargedIsoDisplPFTau*Dxy*') + " \
                            "65536*filter('*Monitoring') + " \
                            "131072*filter('*Reg') + " \
                            "262144*filter('*L1Seeded') + " \
                            "524288*filter('*1Prong') + " \
                            "1048576*filter('*DoubleL2IsoTau26*') + " \
                            "2097152*filter('*SingleL2IsoTau20*') + " \
                            "4194304*filter('*TauJet*') "),
            # qualityBits = cms.string("5000*filter('*DoubleL2IsoTau26*')"),
            qualityBitsDoc = cms.string("1 = LooseChargedIso, 2 = MediumChargedIso, 4 = TightChargedIso, 8 = DeepTau, 16 = TightID OOSC photons, 32 = HPS, 64 = charged iso di-tau, 128 = deeptau di-tau, 256 = e-tau, 512 = mu-tau, 1024 = single-tau/tau+MET, 2048 = run 2 VBF+ditau, 4096 = run 3 VBF+ditau, 8192 = run 3 double PF jets + ditau, 16384 = di-tau + PFJet, 32768 = Displaced Tau, 65536 = Monitoring, 131072 = regional paths, 262144 = L1 seeded paths, 524288 = 1 prong tau paths, 1048576 = double L2 tau26 (for tau embedding), 2097152 = single L2 tau20 (for tauleg in mu + tau crosstrigger in embedding), 4194304 = tau jet5 (for tauleg in e + tau crosstrigger in embedding)"),
        )
process.triggerObjectTable.selections[4].qualityBits = cms.string(
                "1         * filter('*CrossCleaned*LooseChargedIsoPFTau*') + " \
                "2         * filter('hltBTagCaloCSVp087Triple') + " \
                "4         * filter('hltDoubleCentralJet90') + " \
                "8         * filter('hltDoublePFCentralJetLooseID90') + " \
                "16        * filter('hltL1sTripleJetVBFIorHTTn2018A_MuTauFinalState&from=1690223938000&to=nowIorDoubleJetCIorSingleJet') + " \
                "32        * filter('hltQuadCentralJet30') + " \
                "64        * filter('hltQuadPFCentralJetLooseID30') + " \
                "128       * max(filter('hltL1sQuadJetC50IorQuadJetC60IorHTT280IorHTT300IorHTT320IorTripleJet846848VBFIorTripleJet887256VBFIorTripleJet927664VBF'), filter('hltL1sQuadJetCIorTripleJetVBFIorHTT')) + " \
                "256       * filter('hltQuadCentralJet45') + " \
                "512       * filter('hltQuadPFCentralJetLooseID45') + " \
                "1024      * max(filter('hltL1sQuadJetC60IorHTT380IorHTT280QuadJetIorHTT300QuadJet'), filter('hltL1sQuadJetC50to60IorHTT280to500IorHTT250to340QuadJet')) + " \
                "2048      * max(filter('hltBTagCaloCSVp05Double'), filter('hltBTagCaloDeepCSVp17Double')) + " \
                "4096      * filter('hltPFCentralJetLooseIDQuad30') + " \
                "8192      * filter('hlt1PFCentralJetLooseID75') + " \
                "16384     * filter('hlt2PFCentralJetLooseID60') + " \
                "32768     * filter('hlt3PFCentralJetLooseID45') + " \
                "65536     * filter('hlt4PFCentralJetLooseID40') + " \
                "131072    * max(filter('hltBTagPFCSVp070Triple'), max(filter('hltBTagPFDeepCSVp24Triple'), filter('hltBTagPFDeepCSV4p5Triple')) )+ " \
                "262144    * filter('hltHpsOverlapFilterDeepTauDoublePFTau*PFJet*') + " \
                "524288   * filter('*CrossCleaned*MediumDeepTauDitauWPPFTau*') + " \
                "1048576   * filter('*CrossCleanedUsingDiJetCorrChecker*')"
                )
process.triggerObjectTable.selections[4].qualityBitsDoc = cms.string(
                "Jet bits: bit 0 for VBF cross-cleaned from loose iso PFTau, bit 1 for hltBTagCaloCSVp087Triple, bit 2 for hltDoubleCentralJet90, bit 3 for hltDoublePFCentralJetLooseID90," \
                " bit 4 for hltL1sTripleJetVBFIorHTTIorDoubleJetCIorSingleJet, bit 5 for hltQuadCentralJet30, bit 6 for hltQuadPFCentralJetLooseID30," \
                " bit 7 for hltL1sQuadJetC50IorQuadJetC60IorHTT280IorHTT300IorHTT320IorTripleJet846848VBFIorTripleJet887256VBFIorTripleJet927664VBF or hltL1sQuadJetCIorTripleJetVBFIorHTT," \
                " bit 8 for hltQuadCentralJet45, bit 9 for hltQuadPFCentralJetLooseID45," \
                " bit 10  for hltL1sQuadJetC60IorHTT380IorHTT280QuadJetIorHTT300QuadJet or hltL1sQuadJetC50to60IorHTT280to500IorHTT250to340QuadJet" \
                " bit 11 for hltBTagCaloCSVp05Double or hltBTagCaloDeepCSVp17Double, bit 12 for hltPFCentralJetLooseIDQuad30, bit 13 for hlt1PFCentralJetLooseID75," \
                " bit 14 for hlt2PFCentralJetLooseID60, bit 15 for hlt3PFCentralJetLooseID45, bit 16 for hlt4PFCentralJetLooseID40," \
                " bit 17 for hltBTagPFCSVp070Triple or hltBTagPFDeepCSVp24Triple or hltBTagPFDeepCSV4p5Triple,"\
                " bit 18 for Double tau + jet,"\
                " bit 19 for VBF cross-cleaned from medium deeptau PFTau,"+
                " bit 20 for VBF cross-cleaned using dijet correlation checker ")
process.triggerObjectTable.selections.append(
            cms.PSet(
            name = cms.string("BoostedTau"),
            id = cms.int32(1515),
            sel = cms.string("type(85) && pt > 120 && coll('hltAK8PFJetsCorrected') && filter('hltAK8SinglePFJets*SoftDropMass40*ParticleNetTauTau')"),
            l1seed = cms.string("type(-99)"),
            l1deltaR = cms.double(0.3),
            l2seed = cms.string("type(85)  && coll('hltAK8CaloJetsCorrectedIDPassed')"),
            l2deltaR = cms.double(0.3),
            skipObjectsNotPassingQualityBits = cms.bool(True),
            qualityBits = cms.string(
                "filter('hltAK8SinglePFJets*SoftDropMass40*ParticleNetTauTau')"
                ),
            qualityBitsDoc = cms.string("Bit 0 for HLT_AK8PFJetX_SoftDropMass40_PFAK8ParticleNetTauTau0p30")))

# Add early deletion of temporary data products to reduce peak memory need
from Configuration.StandardSequences.earlyDeleteSettings_cff import customiseEarlyDelete
process = customiseEarlyDelete(process)
# End adding early deletion
